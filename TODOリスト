import 'package:flutter/material.dart';

void main() {
  runApp(const ToDoApp());
}

class ToDoApp extends StatelessWidget {
  const ToDoApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ToDoアプリ',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        fontFamily: 'Inter', // フォントをInterに設定
      ),
      home: const ToDoHomePage(),
    );
  }
}

class ToDoHomePage extends StatefulWidget {
  const ToDoHomePage({super.key});

  @override
  State<ToDoHomePage> createState() => _ToDoHomePageState();
}

class _ToDoHomePageState extends State<ToDoHomePage> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  final List<String> _tabs = ['すべて', '仕事', 'プライベート', 'その他'];
  final Map<String, List<ToDoItem>> _tasks = {
    'すべて': [],
    '仕事': [],
    'プライベート': [],
    'その他': [],
  };

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: _tabs.length, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  void _addTask(String tab, String taskName) {
    setState(() {
      final newItem = ToDoItem(name: taskName, isCompleted: false);
      _tasks[tab]?.add(newItem);
      if (tab != 'すべて') {
        _tasks['すべて']?.add(newItem);
      }
    });
  }

  void _toggleTaskCompletion(String tab, ToDoItem item) {
    setState(() {
      item.isCompleted = !item.isCompleted;
      // すべてのタブでも状態を同期させる
      for (var taskList in _tasks.values) {
        final index = taskList.indexOf(item);
        if (index != -1) {
          taskList[index].isCompleted = item.isCompleted;
        }
      }
    });
  }

  void _deleteTask(String tab, ToDoItem item) {
    setState(() {
      _tasks[tab]?.remove(item);
      // すべてのタブでも削除を同期させる
      for (var taskList in _tasks.values) {
        taskList.remove(item);
      }
    });
  }

  Future<void> _showAddTaskDialog(String currentTab) async {
    String? taskName;
    await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('新しいToDoを追加'),
          content: TextField(
            onChanged: (value) {
              taskName = value;
            },
            decoration: const InputDecoration(hintText: 'タスク名を入力'),
          ),
          actions: <Widget>[
            TextButton(
              child: const Text('キャンセル'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: const Text('追加'),
              onPressed: () {
                if (taskName != null && taskName!.isNotEmpty) {
                  Navigator.of(context).pop(taskName);
                }
              },
            ),
          ],
        );
      },
    ).then((value) {
      if (value != null && value.isNotEmpty) {
        _addTask(currentTab, value);
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ToDoアプリ'),
        bottom: TabBar(
          controller: _tabController,
          tabs: _tabs.map((tab) => Tab(text: tab)).toList(),
          labelStyle: const TextStyle(fontWeight: FontWeight.bold),
          unselectedLabelStyle: const TextStyle(fontWeight: FontWeight.normal),
          indicatorColor: Colors.white,
        ),
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(
            bottom: Radius.circular(20), // 下部を丸くする
          ),
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: _tabs.map((tab) {
          return Padding(
            padding: const EdgeInsets.all(8.0),
            child: _tasks[tab]!.isEmpty
                ? Center(
                    child: Text(
                      '${tab}のタスクはありません。',
                      style: TextStyle(fontSize: 18, color: Colors.grey[600]),
                    ),
                  )
                : ListView.builder(
                    itemCount: _tasks[tab]?.length ?? 0,
                    itemBuilder: (context, index) {
                      final item = _tasks[tab]![index];
                      return Card(
                        margin: const EdgeInsets.symmetric(vertical: 6.0, horizontal: 4.0),
                        elevation: 2,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10), // カードの角を丸くする
                        ),
                        child: ListTile(
                          leading: Checkbox(
                            value: item.isCompleted,
                            onChanged: (bool? value) {
                              _toggleTaskCompletion(tab, item);
                            },
                            activeColor: Colors.blueAccent,
                          ),
                          title: Text(
                            item.name,
                            style: TextStyle(
                              decoration: item.isCompleted ? TextDecoration.lineThrough : null,
                              color: item.isCompleted ? Colors.grey : Colors.black,
                            ),
                          ),
                          trailing: IconButton(
                            icon: const Icon(Icons.delete, color: Colors.redAccent),
                            onPressed: () {
                              _deleteTask(tab, item);
                            },
                          ),
                        ),
                      );
                    },
                  ),
          );
        }).toList(),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // 現在選択されているタブを取得してダイアログに渡す
          _showAddTaskDialog(_tabs[_tabController.index]);
        },
        tooltip: 'ToDoを追加',
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(30.0), // FABを丸くする
        ),
        elevation: 6,
        backgroundColor: Colors.blueAccent,
        child: const Icon(Icons.add, color: Colors.white),
      ),
    );
  }
}

class ToDoItem {
  String name;
  bool isCompleted;

  ToDoItem({required this.name, required this.isCompleted});
}
